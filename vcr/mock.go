// Code generated by MockGen. DO NOT EDIT.
// Source: vcr/interface.go

// Package vcr is a generated GoMock package.
package vcr

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	ssi "github.com/nuts-foundation/go-did"
	did "github.com/nuts-foundation/go-did/did"
	vc "github.com/nuts-foundation/go-did/vc"
	concept "github.com/nuts-foundation/nuts-node/vcr/concept"
	credential "github.com/nuts-foundation/nuts-node/vcr/credential"
	presentation "github.com/nuts-foundation/nuts-node/vcr/presentation"
	proof "github.com/nuts-foundation/nuts-node/vcr/proof"
)

// MockConceptFinder is a mock of ConceptFinder interface.
type MockConceptFinder struct {
	ctrl     *gomock.Controller
	recorder *MockConceptFinderMockRecorder
}

// MockConceptFinderMockRecorder is the mock recorder for MockConceptFinder.
type MockConceptFinderMockRecorder struct {
	mock *MockConceptFinder
}

// NewMockConceptFinder creates a new mock instance.
func NewMockConceptFinder(ctrl *gomock.Controller) *MockConceptFinder {
	mock := &MockConceptFinder{ctrl: ctrl}
	mock.recorder = &MockConceptFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConceptFinder) EXPECT() *MockConceptFinderMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockConceptFinder) Get(conceptName string, allowUntrusted bool, subject string) (concept.Concept, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", conceptName, allowUntrusted, subject)
	ret0, _ := ret[0].(concept.Concept)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockConceptFinderMockRecorder) Get(conceptName, allowUntrusted, subject interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockConceptFinder)(nil).Get), conceptName, allowUntrusted, subject)
}

// Search mocks base method.
func (m *MockConceptFinder) Search(ctx context.Context, conceptName string, allowUntrusted bool, query map[string]string) ([]concept.Concept, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, conceptName, allowUntrusted, query)
	ret0, _ := ret[0].([]concept.Concept)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockConceptFinderMockRecorder) Search(ctx, conceptName, allowUntrusted, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockConceptFinder)(nil).Search), ctx, conceptName, allowUntrusted, query)
}

// MockCredentialStore is a mock of CredentialStore interface.
type MockCredentialStore struct {
	ctrl     *gomock.Controller
	recorder *MockCredentialStoreMockRecorder
}

// MockCredentialStoreMockRecorder is the mock recorder for MockCredentialStore.
type MockCredentialStoreMockRecorder struct {
	mock *MockCredentialStore
}

// NewMockCredentialStore creates a new mock instance.
func NewMockCredentialStore(ctrl *gomock.Controller) *MockCredentialStore {
	mock := &MockCredentialStore{ctrl: ctrl}
	mock.recorder = &MockCredentialStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCredentialStore) EXPECT() *MockCredentialStoreMockRecorder {
	return m.recorder
}

// ResolveCredential mocks base method.
func (m *MockCredentialStore) ResolveCredential(ID ssi.URI, resolveTime *time.Time) (*vc.VerifiableCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveCredential", ID, resolveTime)
	ret0, _ := ret[0].(*vc.VerifiableCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveCredential indicates an expected call of ResolveCredential.
func (mr *MockCredentialStoreMockRecorder) ResolveCredential(ID, resolveTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveCredential", reflect.TypeOf((*MockCredentialStore)(nil).ResolveCredential), ID, resolveTime)
}

// StoreCredential mocks base method.
func (m *MockCredentialStore) StoreCredential(vc vc.VerifiableCredential, validAt *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCredential", vc, validAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreCredential indicates an expected call of StoreCredential.
func (mr *MockCredentialStoreMockRecorder) StoreCredential(vc, validAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCredential", reflect.TypeOf((*MockCredentialStore)(nil).StoreCredential), vc, validAt)
}

// StoreRevocation mocks base method.
func (m *MockCredentialStore) StoreRevocation(r credential.Revocation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRevocation", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRevocation indicates an expected call of StoreRevocation.
func (mr *MockCredentialStoreMockRecorder) StoreRevocation(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRevocation", reflect.TypeOf((*MockCredentialStore)(nil).StoreRevocation), r)
}

// MockTrustStore is a mock of TrustStore interface.
type MockTrustStore struct {
	ctrl     *gomock.Controller
	recorder *MockTrustStoreMockRecorder
}

// MockTrustStoreMockRecorder is the mock recorder for MockTrustStore.
type MockTrustStoreMockRecorder struct {
	mock *MockTrustStore
}

// NewMockTrustStore creates a new mock instance.
func NewMockTrustStore(ctrl *gomock.Controller) *MockTrustStore {
	mock := &MockTrustStore{ctrl: ctrl}
	mock.recorder = &MockTrustStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrustStore) EXPECT() *MockTrustStoreMockRecorder {
	return m.recorder
}

// Trust mocks base method.
func (m *MockTrustStore) Trust(credentialType, issuer ssi.URI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trust", credentialType, issuer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Trust indicates an expected call of Trust.
func (mr *MockTrustStoreMockRecorder) Trust(credentialType, issuer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trust", reflect.TypeOf((*MockTrustStore)(nil).Trust), credentialType, issuer)
}

// Trusted mocks base method.
func (m *MockTrustStore) Trusted(credentialType ssi.URI) ([]ssi.URI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trusted", credentialType)
	ret0, _ := ret[0].([]ssi.URI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Trusted indicates an expected call of Trusted.
func (mr *MockTrustStoreMockRecorder) Trusted(credentialType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trusted", reflect.TypeOf((*MockTrustStore)(nil).Trusted), credentialType)
}

// Untrust mocks base method.
func (m *MockTrustStore) Untrust(credentialType, issuer ssi.URI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Untrust", credentialType, issuer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Untrust indicates an expected call of Untrust.
func (mr *MockTrustStoreMockRecorder) Untrust(credentialType, issuer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Untrust", reflect.TypeOf((*MockTrustStore)(nil).Untrust), credentialType, issuer)
}

// Untrusted mocks base method.
func (m *MockTrustStore) Untrusted(credentialType ssi.URI) ([]ssi.URI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Untrusted", credentialType)
	ret0, _ := ret[0].([]ssi.URI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Untrusted indicates an expected call of Untrusted.
func (mr *MockTrustStoreMockRecorder) Untrusted(credentialType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Untrusted", reflect.TypeOf((*MockTrustStore)(nil).Untrusted), credentialType)
}

// MockResolver is a mock of CredentialResolver interface.
type MockResolver struct {
	ctrl     *gomock.Controller
	recorder *MockResolverMockRecorder
}

// MockResolverMockRecorder is the mock recorder for MockResolver.
type MockResolverMockRecorder struct {
	mock *MockResolver
}

// NewMockResolver creates a new mock instance.
func NewMockResolver(ctrl *gomock.Controller) *MockResolver {
	mock := &MockResolver{ctrl: ctrl}
	mock.recorder = &MockResolverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResolver) EXPECT() *MockResolverMockRecorder {
	return m.recorder
}

// ResolveCredential mocks base method.
func (m *MockResolver) ResolveCredential(ID ssi.URI, resolveTime *time.Time) (*vc.VerifiableCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveCredential", ID, resolveTime)
	ret0, _ := ret[0].(*vc.VerifiableCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveCredential indicates an expected call of ResolveCredential.
func (mr *MockResolverMockRecorder) ResolveCredential(ID, resolveTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveCredential", reflect.TypeOf((*MockResolver)(nil).ResolveCredential), ID, resolveTime)
}

// MockHolder is a mock of Holder interface.
type MockHolder struct {
	ctrl     *gomock.Controller
	recorder *MockHolderMockRecorder
}

// MockHolderMockRecorder is the mock recorder for MockHolder.
type MockHolderMockRecorder struct {
	mock *MockHolder
}

// NewMockHolder creates a new mock instance.
func NewMockHolder(ctrl *gomock.Controller) *MockHolder {
	mock := &MockHolder{ctrl: ctrl}
	mock.recorder = &MockHolderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHolder) EXPECT() *MockHolderMockRecorder {
	return m.recorder
}

// BuildVerifiablePresentation mocks base method.
func (m *MockHolder) BuildVerifiablePresentation(credentials []vc.VerifiableCredential, proofOptions proof.ProofOptions, did did.DID, validateVC bool) (*presentation.VerifiablePresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildVerifiablePresentation", credentials, proofOptions, did, validateVC)
	ret0, _ := ret[0].(*presentation.VerifiablePresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildVerifiablePresentation indicates an expected call of BuildVerifiablePresentation.
func (mr *MockHolderMockRecorder) BuildVerifiablePresentation(credentials, proofOptions, did, validateVC interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildVerifiablePresentation", reflect.TypeOf((*MockHolder)(nil).BuildVerifiablePresentation), credentials, proofOptions, did, validateVC)
}

// MockVerifier is a mock of Verifier interface.
type MockVerifier struct {
	ctrl     *gomock.Controller
	recorder *MockVerifierMockRecorder
}

// MockVerifierMockRecorder is the mock recorder for MockVerifier.
type MockVerifierMockRecorder struct {
	mock *MockVerifier
}

// NewMockVerifier creates a new mock instance.
func NewMockVerifier(ctrl *gomock.Controller) *MockVerifier {
	mock := &MockVerifier{ctrl: ctrl}
	mock.recorder = &MockVerifierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVerifier) EXPECT() *MockVerifierMockRecorder {
	return m.recorder
}

// ValidateCredential mocks base method.
func (m *MockVerifier) ValidateCredential(credential vc.VerifiableCredential, allowUntrusted, checkSignature bool, validAt *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCredential", credential, allowUntrusted, checkSignature, validAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateCredential indicates an expected call of ValidateCredential.
func (mr *MockVerifierMockRecorder) ValidateCredential(credential, allowUntrusted, checkSignature, validAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCredential", reflect.TypeOf((*MockVerifier)(nil).ValidateCredential), credential, allowUntrusted, checkSignature, validAt)
}

// VerifyPresentation mocks base method.
func (m *MockVerifier) VerifyPresentation(verifiablePresentation presentation.VerifiablePresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPresentation", verifiablePresentation)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyPresentation indicates an expected call of VerifyPresentation.
func (mr *MockVerifierMockRecorder) VerifyPresentation(verifiablePresentation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPresentation", reflect.TypeOf((*MockVerifier)(nil).VerifyPresentation), verifiablePresentation)
}

// MockIssuer is a mock of Issuer interface.
type MockIssuer struct {
	ctrl     *gomock.Controller
	recorder *MockIssuerMockRecorder
}

// MockIssuerMockRecorder is the mock recorder for MockIssuer.
type MockIssuerMockRecorder struct {
	mock *MockIssuer
}

// NewMockIssuer creates a new mock instance.
func NewMockIssuer(ctrl *gomock.Controller) *MockIssuer {
	mock := &MockIssuer{ctrl: ctrl}
	mock.recorder = &MockIssuerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssuer) EXPECT() *MockIssuerMockRecorder {
	return m.recorder
}

// Issue mocks base method.
func (m *MockIssuer) Issue(vcToIssue vc.VerifiableCredential) (*vc.VerifiableCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issue", vcToIssue)
	ret0, _ := ret[0].(*vc.VerifiableCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Issue indicates an expected call of Issue.
func (mr *MockIssuerMockRecorder) Issue(vcToIssue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issue", reflect.TypeOf((*MockIssuer)(nil).Issue), vcToIssue)
}

// Revoke mocks base method.
func (m *MockIssuer) Revoke(ID ssi.URI) (*credential.Revocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", ID)
	ret0, _ := ret[0].(*credential.Revocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Revoke indicates an expected call of Revoke.
func (mr *MockIssuerMockRecorder) Revoke(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockIssuer)(nil).Revoke), ID)
}

// MockVCR is a mock of VCR interface.
type MockVCR struct {
	ctrl     *gomock.Controller
	recorder *MockVCRMockRecorder
}

// MockVCRMockRecorder is the mock recorder for MockVCR.
type MockVCRMockRecorder struct {
	mock *MockVCR
}

// NewMockVCR creates a new mock instance.
func NewMockVCR(ctrl *gomock.Controller) *MockVCR {
	mock := &MockVCR{ctrl: ctrl}
	mock.recorder = &MockVCRMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVCR) EXPECT() *MockVCRMockRecorder {
	return m.recorder
}

// BuildVerifiablePresentation mocks base method.
func (m *MockVCR) BuildVerifiablePresentation(credentials []vc.VerifiableCredential, proofOptions proof.ProofOptions, did did.DID, validateVC bool) (*presentation.VerifiablePresentation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BuildVerifiablePresentation", credentials, proofOptions, did, validateVC)
	ret0, _ := ret[0].(*presentation.VerifiablePresentation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BuildVerifiablePresentation indicates an expected call of BuildVerifiablePresentation.
func (mr *MockVCRMockRecorder) BuildVerifiablePresentation(credentials, proofOptions, did, validateVC interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BuildVerifiablePresentation", reflect.TypeOf((*MockVCR)(nil).BuildVerifiablePresentation), credentials, proofOptions, did, validateVC)
}

// Get mocks base method.
func (m *MockVCR) Get(conceptName string, allowUntrusted bool, subject string) (concept.Concept, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", conceptName, allowUntrusted, subject)
	ret0, _ := ret[0].(concept.Concept)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVCRMockRecorder) Get(conceptName, allowUntrusted, subject interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVCR)(nil).Get), conceptName, allowUntrusted, subject)
}

// Issue mocks base method.
func (m *MockVCR) Issue(vcToIssue vc.VerifiableCredential) (*vc.VerifiableCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Issue", vcToIssue)
	ret0, _ := ret[0].(*vc.VerifiableCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Issue indicates an expected call of Issue.
func (mr *MockVCRMockRecorder) Issue(vcToIssue interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issue", reflect.TypeOf((*MockVCR)(nil).Issue), vcToIssue)
}

// ResolveCredential mocks base method.
func (m *MockVCR) ResolveCredential(ID ssi.URI, resolveTime *time.Time) (*vc.VerifiableCredential, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveCredential", ID, resolveTime)
	ret0, _ := ret[0].(*vc.VerifiableCredential)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveCredential indicates an expected call of ResolveCredential.
func (mr *MockVCRMockRecorder) ResolveCredential(ID, resolveTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveCredential", reflect.TypeOf((*MockVCR)(nil).ResolveCredential), ID, resolveTime)
}

// Revoke mocks base method.
func (m *MockVCR) Revoke(ID ssi.URI) (*credential.Revocation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoke", ID)
	ret0, _ := ret[0].(*credential.Revocation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Revoke indicates an expected call of Revoke.
func (mr *MockVCRMockRecorder) Revoke(ID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoke", reflect.TypeOf((*MockVCR)(nil).Revoke), ID)
}

// Search mocks base method.
func (m *MockVCR) Search(ctx context.Context, conceptName string, allowUntrusted bool, query map[string]string) ([]concept.Concept, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", ctx, conceptName, allowUntrusted, query)
	ret0, _ := ret[0].([]concept.Concept)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockVCRMockRecorder) Search(ctx, conceptName, allowUntrusted, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockVCR)(nil).Search), ctx, conceptName, allowUntrusted, query)
}

// StoreCredential mocks base method.
func (m *MockVCR) StoreCredential(vc vc.VerifiableCredential, validAt *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreCredential", vc, validAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreCredential indicates an expected call of StoreCredential.
func (mr *MockVCRMockRecorder) StoreCredential(vc, validAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreCredential", reflect.TypeOf((*MockVCR)(nil).StoreCredential), vc, validAt)
}

// StoreRevocation mocks base method.
func (m *MockVCR) StoreRevocation(r credential.Revocation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreRevocation", r)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreRevocation indicates an expected call of StoreRevocation.
func (mr *MockVCRMockRecorder) StoreRevocation(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreRevocation", reflect.TypeOf((*MockVCR)(nil).StoreRevocation), r)
}

// Trust mocks base method.
func (m *MockVCR) Trust(credentialType, issuer ssi.URI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trust", credentialType, issuer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Trust indicates an expected call of Trust.
func (mr *MockVCRMockRecorder) Trust(credentialType, issuer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trust", reflect.TypeOf((*MockVCR)(nil).Trust), credentialType, issuer)
}

// Trusted mocks base method.
func (m *MockVCR) Trusted(credentialType ssi.URI) ([]ssi.URI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trusted", credentialType)
	ret0, _ := ret[0].([]ssi.URI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Trusted indicates an expected call of Trusted.
func (mr *MockVCRMockRecorder) Trusted(credentialType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trusted", reflect.TypeOf((*MockVCR)(nil).Trusted), credentialType)
}

// Untrust mocks base method.
func (m *MockVCR) Untrust(credentialType, issuer ssi.URI) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Untrust", credentialType, issuer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Untrust indicates an expected call of Untrust.
func (mr *MockVCRMockRecorder) Untrust(credentialType, issuer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Untrust", reflect.TypeOf((*MockVCR)(nil).Untrust), credentialType, issuer)
}

// Untrusted mocks base method.
func (m *MockVCR) Untrusted(credentialType ssi.URI) ([]ssi.URI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Untrusted", credentialType)
	ret0, _ := ret[0].([]ssi.URI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Untrusted indicates an expected call of Untrusted.
func (mr *MockVCRMockRecorder) Untrusted(credentialType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Untrusted", reflect.TypeOf((*MockVCR)(nil).Untrusted), credentialType)
}

// ValidateCredential mocks base method.
func (m *MockVCR) ValidateCredential(credential vc.VerifiableCredential, allowUntrusted, checkSignature bool, validAt *time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCredential", credential, allowUntrusted, checkSignature, validAt)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateCredential indicates an expected call of ValidateCredential.
func (mr *MockVCRMockRecorder) ValidateCredential(credential, allowUntrusted, checkSignature, validAt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCredential", reflect.TypeOf((*MockVCR)(nil).ValidateCredential), credential, allowUntrusted, checkSignature, validAt)
}

// VerifyPresentation mocks base method.
func (m *MockVCR) VerifyPresentation(verifiablePresentation presentation.VerifiablePresentation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyPresentation", verifiablePresentation)
	ret0, _ := ret[0].(error)
	return ret0
}

// VerifyPresentation indicates an expected call of VerifyPresentation.
func (mr *MockVCRMockRecorder) VerifyPresentation(verifiablePresentation interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyPresentation", reflect.TypeOf((*MockVCR)(nil).VerifyPresentation), verifiablePresentation)
}
