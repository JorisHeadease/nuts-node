/*
 * Copyright (C) 2022 Nuts community
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 *
 */

package proof

import (
	"crypto"
	"encoding/json"
	ssi "github.com/nuts-foundation/go-did"
	nutsCrypto "github.com/nuts-foundation/nuts-node/crypto"
	"github.com/nuts-foundation/nuts-node/vcr/signature"
	"time"
)

type DataIntegrityProof interface {
	// Type The specific proof type used. For example, an Ed25519Signature2020 type indicates that the proof includes a digital signature produced by an ed25519 cryptographic key.
	Type() string
	// ProofPurpose. The specific intent for the proof, the reason why an entity created it. Acts as a safeguard to prevent the proof from being misused for a purpose other than the one it was intended for. For example, a proof can be used for purposes of authentication, for asserting control of a Verifiable Credential (assertionMethod), and several others.
	ProofPurpose() string
	// VerificationMethod Required. A set of parameters required to independently verify the proof, such as an identifier for a public/private key pair that would be used in the proof.
	VerificationMethod() ssi.URI
	// Created Required. The string value of an [ISO8601] combined date and time string generated by the Proof Algorithm.
	Created() time.Time
	// Domain Optional. A string value specifying the restricted domain of the proof.
	Domain() string
	// ProofValue Required. One of any number of valid representations of proof value generated by the Proof Algorithm.
	ProofValue() interface{}
}

type JSONWebSignature2020 struct {
	JWSType               string    `json:"type"`
	JWSProofPurpose       string    `json:"proofPurpose"`
	JWSVerificationMethod ssi.URI   `json:"verificationMethod"`
	JWSCreated            time.Time `json:"created"`
	JWSDomain             string    `json:"domain,omitempty"`
	JWSProofValue         string    `json:"jws"`
}

func (j JSONWebSignature2020) Type() string {
	return j.JWSType
}

func (j JSONWebSignature2020) ProofPurpose() string {
	return j.JWSProofPurpose
}

func (j JSONWebSignature2020) VerificationMethod() ssi.URI {
	return j.JWSVerificationMethod
}

func (j JSONWebSignature2020) Created() time.Time {
	return j.JWSCreated
}

func (j JSONWebSignature2020) Domain() string {
	return j.JWSDomain
}

func (j JSONWebSignature2020) ProofValue() interface{} {
	return j.JWSProofValue
}

// Document represents the document to sign.
type Document map[string]interface{}

type SignedDocument map[string]interface{}
type DocumentProof map[string]interface{}

func NewSignedDocument(source interface{}) (SignedDocument, error) {
	// Convert the VC to a generic LD Signed Document
	sourceBytes, err := json.Marshal(source)
	if err != nil {
		return nil, err
	}
	result := SignedDocument{}
	if err := json.Unmarshal(sourceBytes, &result); err != nil {
		return nil, err
	}
	return result, nil
}

func (d SignedDocument) DocumentWithoutProof() Document {
	docWithoutProof := Document{}
	for key, value := range d {
		if key == "proof" {
			continue
		}
		docWithoutProof[key] = value
	}
	return docWithoutProof
}

func (d SignedDocument) FirstProof() DocumentProof {
	rawProof, ok := d["proof"]
	if !ok {
		// no proof in signed document
		return nil
	}

	if singleProof, ok := rawProof.(map[string]interface{}); ok {
		return singleProof
	}

	if proofList, isArray := rawProof.([]interface{}); isArray {
		if len(proofList) > 0 {
			if firstProof, isMap := proofList[0].(map[string]interface{}); isMap {
				return firstProof
			}
		}
	}
	return nil
}

func (d SignedDocument) ProofType() *ssi.ProofType {
	proofType, ok := d["type"]
	if !ok {
		return nil
	}
	parsedType := ssi.ProofType(proofType.(string))
	return &parsedType
}

type JsonLDDocument struct {
	Context []interface{}
	Document
}

// Proof is the interface that defines a set of methods which a proof should implement.
type Proof interface {
	// Sign defines the basic signing operation on the proof.
	Sign(document Document, suite signature.Suite, key nutsCrypto.Key) (interface{}, error)
}

// ProofBuilder defines a generic interface for proof builders.
type ProofBuilder interface {
	// Sign accepts a key and returns the signed document.
	Sign(document map[string]interface{}, key nutsCrypto.Key) (interface{}, error)
}

type ProofVerifier interface {
	// Verify verifies the signedDocument with the provided public key. If the document is valid, it returns no error.
	Verify(document interface{}, suite signature.Suite, key crypto.PublicKey) error
}
